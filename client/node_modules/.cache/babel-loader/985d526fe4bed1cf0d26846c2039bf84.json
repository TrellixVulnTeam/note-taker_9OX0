{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Desktop\\\\api\\\\notes-taker-fullstack\\\\notes-taker-client\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable no-unused-vars */\nimport React, { useState } from 'react';\nimport './App.scss';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport Login from './components/Login';\nimport SignUp from './components/SignUp';\nimport Dashboard from './components/dashboard/Dashboard';\nimport ProtectedRoutes from './protectedRoutes/ProtectedRoutes';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { AuthContext } from './helpers/AuthContext';\nimport Axios from 'axios';\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [userId, setUserId] = useState(0);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const url = \"http://localhost:3002/auth\";\n\n  const login = () => {\n    const data = {\n      email: email,\n      password: password\n    };\n    Axios.post(url + \"/login\", data).then(response => {\n      if (response.data.error) {\n        toast.warn(response.data.error); // alert(response.data)\n        // if there is any error, don't create an accessToken to localstorage, else if any error doesn't exist, create accessToken\n\n        console.log(\"response if condition error: \", response.data.error);\n      } else {\n        toast.success(response.data.message);\n        console.log(\"userData: \", response.data.id); // setUserId(response.data.id)\n\n        localStorage.setItem(\"token\", response.data.token); //this comes from routes -> const accessToken -> res.json({token, username, id})\n        // const userData = {\n        //     id: response.data.id,\n        //     // name: response.data.name,\n        //     // email: response.data.email\n        // }\n        // localStorage.setItem(\"user\", JSON.stringify(userData));\n        // redirect();\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n      value: {\n        userId,\n        setUserId,\n        setEmail,\n        setPassword\n      },\n      children: /*#__PURE__*/_jsxDEV(Router, {\n        children: [/*#__PURE__*/_jsxDEV(Switch, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/login\",\n            exact: true,\n            render: props => /*#__PURE__*/_jsxDEV(Login, { ...props\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/create-account\",\n            component: SignUp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ProtectedRoutes, {\n            path: \"/dashboard\",\n            component: Dashboard\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/\",\n            children: /*#__PURE__*/_jsxDEV(Redirect, {\n              exact: true,\n              from: \"/\",\n              to: \"login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"**\",\n            component: () => \"404 NOT FOUND\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {\n          autoClose: 3000\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"AukBSs1QLg+ziQBMfGZKzznwYks=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Dell/Desktop/api/notes-taker-fullstack/notes-taker-client/src/App.js"],"names":["React","useState","BrowserRouter","Router","Switch","Route","Redirect","Login","SignUp","Dashboard","ProtectedRoutes","ToastContainer","AuthContext","Axios","toast","App","userId","setUserId","email","setEmail","password","setPassword","url","login","data","post","then","response","error","warn","console","log","success","message","id","localStorage","setItem","token","props"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,YAAP;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,MAAlC,EAA0CC,KAA1C,EAAiDC,QAAjD,QAAiE,kBAAjE;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,SAAP,MAAsB,kCAAtB;AACA,OAAOC,eAAP,MAA4B,mCAA5B;AACA,SAASC,cAAT,QAA+B,gBAA/B;AACA,OAAO,uCAAP;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,gBAAtB;;;AACA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBhB,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM,CAACiB,KAAD,EAAQC,QAAR,IAAoBlB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACmB,QAAD,EAAWC,WAAX,IAA0BpB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAMqB,GAAG,GAAG,4BAAZ;;AAEA,QAAMC,KAAK,GAAG,MAAM;AAClB,UAAMC,IAAI,GAAG;AAAEN,MAAAA,KAAK,EAAEA,KAAT;AAAgBE,MAAAA,QAAQ,EAAEA;AAA1B,KAAb;AACAP,IAAAA,KAAK,CAACY,IAAN,CAAWH,GAAG,GAAG,QAAjB,EAA2BE,IAA3B,EAAiCE,IAAjC,CAAuCC,QAAD,IAAc;AAClD,UAAIA,QAAQ,CAACH,IAAT,CAAcI,KAAlB,EAAyB;AACvBd,QAAAA,KAAK,CAACe,IAAN,CAAWF,QAAQ,CAACH,IAAT,CAAcI,KAAzB,EADuB,CAEvB;AACA;;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CJ,QAAQ,CAACH,IAAT,CAAcI,KAA3D;AACD,OALD,MAMK;AACHd,QAAAA,KAAK,CAACkB,OAAN,CAAcL,QAAQ,CAACH,IAAT,CAAcS,OAA5B;AACAH,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BJ,QAAQ,CAACH,IAAT,CAAcU,EAAxC,EAFG,CAGH;;AACAC,QAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BT,QAAQ,CAACH,IAAT,CAAca,KAA5C,EAJG,CAIiD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AACF,KApBD;AAqBD,GAvBD;;AAyBA,sBACE;AAAA,2BACE,QAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAE;AAAErB,QAAAA,MAAF;AAAUC,QAAAA,SAAV;AAAqBE,QAAAA,QAArB;AAA+BE,QAAAA;AAA/B,OAA7B;AAAA,6BACE,QAAC,MAAD;AAAA,gCACE,QAAC,MAAD;AAAA,kCACE,QAAC,KAAD;AAAO,YAAA,IAAI,EAAC,QAAZ;AAAqB,YAAA,KAAK,MAA1B;AAA2B,YAAA,MAAM,EAAGiB,KAAD,iBACjC,QAAC,KAAD,OAAWA;AAAX;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF,eAIE,QAAC,KAAD;AAAO,YAAA,IAAI,EAAC,iBAAZ;AAA8B,YAAA,SAAS,EAAE9B;AAAzC;AAAA;AAAA;AAAA;AAAA,kBAJF,eAKE,QAAC,eAAD;AAAiB,YAAA,IAAI,EAAC,YAAtB;AAAmC,YAAA,SAAS,EAAEC;AAA9C;AAAA;AAAA;AAAA;AAAA,kBALF,eAUE,QAAC,KAAD;AAAO,YAAA,KAAK,MAAZ;AAAa,YAAA,IAAI,EAAC,GAAlB;AAAA,mCACE,QAAC,QAAD;AAAU,cAAA,KAAK,MAAf;AAAgB,cAAA,IAAI,EAAC,GAArB;AAAyB,cAAA,EAAE,EAAC;AAA5B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAVF,eAaE,QAAC,KAAD;AAAO,YAAA,KAAK,MAAZ;AAAa,YAAA,IAAI,EAAC,IAAlB;AAAuB,YAAA,SAAS,EAAE,MAAM;AAAxC;AAAA;AAAA;AAAA;AAAA,kBAbF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAgBE,QAAC,cAAD;AAAgB,UAAA,SAAS,EAAE;AAA3B;AAAA;AAAA;AAAA;AAAA,gBAhBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD;;GAxDQM,G;;KAAAA,G;AA0DT,eAAeA,GAAf","sourcesContent":["/* eslint-disable no-unused-vars */\r\nimport React, { useState } from 'react';\r\nimport './App.scss';\r\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom'\r\nimport Login from './components/Login'\r\nimport SignUp from './components/SignUp';\r\nimport Dashboard from './components/dashboard/Dashboard'\r\nimport ProtectedRoutes from './protectedRoutes/ProtectedRoutes';\r\nimport { ToastContainer } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport { AuthContext } from './helpers/AuthContext'\r\nimport Axios from 'axios'\r\nimport { toast } from \"react-toastify\"\r\nfunction App() {\r\n\r\n  const [userId, setUserId] = useState(0)\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const url = \"http://localhost:3002/auth\"\r\n\r\n  const login = () => {\r\n    const data = { email: email, password: password }\r\n    Axios.post(url + \"/login\", data).then((response) => {\r\n      if (response.data.error) {\r\n        toast.warn(response.data.error)\r\n        // alert(response.data)\r\n        // if there is any error, don't create an accessToken to localstorage, else if any error doesn't exist, create accessToken\r\n        console.log(\"response if condition error: \", response.data.error);\r\n      }\r\n      else {\r\n        toast.success(response.data.message)\r\n        console.log(\"userData: \", response.data.id);\r\n        // setUserId(response.data.id)\r\n        localStorage.setItem(\"token\", response.data.token); //this comes from routes -> const accessToken -> res.json({token, username, id})\r\n        // const userData = {\r\n        //     id: response.data.id,\r\n        //     // name: response.data.name,\r\n        //     // email: response.data.email\r\n        // }\r\n        // localStorage.setItem(\"user\", JSON.stringify(userData));\r\n        // redirect();\r\n      }\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <AuthContext.Provider value={{ userId, setUserId, setEmail, setPassword }}>\r\n        <Router>\r\n          <Switch>\r\n            <Route path=\"/login\" exact render={(props) => (\r\n              <Login {...props} />\r\n            )} />\r\n            <Route path=\"/create-account\" component={SignUp} />\r\n            <ProtectedRoutes path=\"/dashboard\" component={Dashboard} />\r\n            {/* <ProtectedRoutes path=\"/profile\" exact component={Profile} />\r\n          <ProtectedRoutes path=\"/add-note\" exact component={AddNote} />\r\n          <ProtectedRoutes path=\"/my-notes\" exact component={MyNotes} />\r\n          <ProtectedRoutes path=\"/notes\" exact component={Notes} /> */}\r\n            <Route exact path=\"/\">\r\n              <Redirect exact from=\"/\" to=\"login\" />\r\n            </Route>\r\n            <Route exact path=\"**\" component={() => \"404 NOT FOUND\"} />\r\n          </Switch>\r\n          <ToastContainer autoClose={3000} />\r\n        </Router>\r\n      </AuthContext.Provider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}